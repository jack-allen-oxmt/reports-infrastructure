{
  "description": "Normalize transform aggs -> flat fields; compute duration + sessionDate; int eventCount; clean arrays; coerce hadLogin.",
  "processors": [
    {
      "script": {
        "lang": "painless",
        "source": "def toMillis(def x) { if (x == null) return null; def v = x; if (v instanceof Map && v.containsKey('value')) { v = v.value; } if (v instanceof List && v.size() > 0) { v = v.get(0); } if (v instanceof Number) return ((Number) v).longValue(); if (v instanceof String) { try { return java.time.Instant.parse(v).toEpochMilli(); } catch (Exception e) { try { return java.time.ZonedDateTime.parse(v).toInstant().toEpochMilli(); } catch (Exception e2) { return null; } } } return null; } def s = toMillis(ctx.sessionStart); def e = toMillis(ctx.sessionEnd); if (s != null) { ctx.sessionStart = s; ctx.sessionDate = s; } if (e != null) { ctx.sessionEnd = e; } if (s != null && e != null) { long d = (e - s) / 1000L; if (d < 0) d = 0; if (d > 28800) d = 28800; ctx.durationSeconds = d; } if (ctx.eventCount != null) { def ev = ctx.eventCount; if (ev instanceof Map && ev.containsKey('value')) { ev = ev.value; } if (ev instanceof Double || ev instanceof Float) { ev = (long) ev; } if (ev instanceof Number) { ctx.eventCount = ((Number) ev).longValue(); } } def fields = ['assetTypes', 'siteTokens', 'pages']; for (def field : fields) { if (ctx.containsKey(field) && ctx[field] != null) { def v = ctx[field]; if (v instanceof Map && v.containsKey('value')) { v = v.value; } List lst; if (v instanceof List) { lst = (List) v; } else { lst = new ArrayList(); lst.add(v); } def set = new java.util.LinkedHashSet(); for (def it : lst) { if (it != null) { set.add(it.toString()); } } ctx[field] = new ArrayList(set); } } if (ctx.containsKey('hadLogin')) { def hl = ctx.hadLogin; if (hl instanceof Map && hl.containsKey('value')) { hl = hl.value; } if (hl instanceof String) { hl = hl.equalsIgnoreCase('true') || hl.equals('1'); } ctx.hadLogin = (hl == true); }"
      }
    }
  ]
}
